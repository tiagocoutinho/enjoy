# -*- coding: utf-8 -*-
#
# This file is part of the enjoy project
#
# Copyright (c) 2018 Tiago Coutinho
# Distributed under the MIT. See LICENSE for more info.

'''
Generate a Python extension module with the constants defined in linux/input.h.
'''

from __future__ import print_function

import os
import re
import sys
import datetime
import collections

MACRO_RE = re.compile(r'#define[ \t]+(?P<name>[\w]+)[ \t]+(?P<value>\w+)\s*')

MACRO_MAP = {
    'KEY': 'Key',
    'BTN': 'Key',
    'REL': 'Relative',
    'ABS': 'Absolute',
    'ID': 'Id',
    'EV': 'EventType',
    'MSC': 'Miscelaneous',
    'SYN': 'Synchronization',
    'LED': 'Led',
    'BUS': 'Bus',
    'FF': 'ForceFeedback',
    'UI_FF': 'UIForceFeedback',
    'SND': 'Sound',
    'SW': 'Switch',
    'REP': 'AutoRepeat',
    'MT': 'MultiTouch',
}

TEMPLATE = '''\
# -*- coding: utf-8 -*-
#
# This file is part of the enjoy project
#
# Copyright (c) 2018 Tiago Coutinho
# Distributed under the MIT. See LICENSE for more info.

# This file has been generated by enjoy.gencodes
# Date: {date}
# Version: {version}

import enum


{body}'''


def gen_reader(filename):
    with open(filename, 'r') as f:
        for line in f:
            line = line.strip()
            expr = MACRO_RE.match(line)
            if expr:
                yield expr.groupdict()


def decode_value(value, default=None):
    try:
        return int(value)
    except ValueError:
        try:
            return int(value, 16)
        except ValueError:
            return default


def fill_enums(filename, enums, hole):
    for item in gen_reader(filename):
        name, value = item['name'], item['value']
        if '_' not in name:
            continue
        group, key = name.split('_', 1)
        if group not in MACRO_MAP:
            continue
        value = decode_value(value, hole.get(value))
        enums[MACRO_MAP[group]].append((name, value))
        hole[name] = value


def enum_str(name, items, base='enum.Enum'):
    lines = ['    {} = 0x{:X}'.format(k, v) for k, v in items]
    lines.insert(0, 'class {name}({base}):'.format(name=name, base=base))
    return '\n'.join(lines)


def gen_enum_str(enums, base='enum.IntEnum'):
    for name, items in enums.items():
        yield enum_str(name, items, base=base)


def main():
    # Default header file locations
    headers = [
        '/usr/include/linux/input.h',
        '/usr/include/linux/input-event-codes.h',
    ]

    if sys.argv[1:]:
        headers = sys.argv[1:]

    uname = list(os.uname()); del uname[1]
    uname = ' '.join(uname)

    enums = collections.defaultdict(list)
    hole = {}
    for header in headers:
        fill_enums(header, enums, hole)

    body = '\n\n\n'.join(gen_enum_str(enums))
    print(TEMPLATE.format(version=uname,
                          date=datetime.datetime.now(),
                          body=body))


if __name__ == '__main__':
    main()
